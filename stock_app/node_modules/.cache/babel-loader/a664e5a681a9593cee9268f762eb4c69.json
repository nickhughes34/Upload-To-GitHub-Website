{"ast":null,"code":"import React from \"react\";\n\nconst SymbolOverview = props => {\n  const {\n    widgetProps,\n    widgetPropsAny\n  } = props;\n  let containerId = \"symbol-overview-widget-container\";\n\n  if (widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id) {\n    containerId = widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id;\n  }\n\n  const ref = React.createRef();\n  React.useEffect(() => {\n    let refValue;\n\n    if (ref.current) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://s3.tradingview.com/tv.js\";\n      script.async = true;\n\n      script.onload = () => {\n        if (typeof TradingView !== \"undefined\") {\n          new TradingView.MediumWidget(Object.assign(Object.assign({\n            \"symbols\": [[\"Apple\", \"AAPL\"], [\"Google\", \"GOOGL\"], [\"Microsoft\", \"MSFT\"]],\n            \"chartOnly\": false,\n            \"width\": \"100%\",\n            \"height\": 400,\n            \"locale\": \"en\",\n            \"colorTheme\": \"dark\",\n            \"gridLineColor\": \"#2A2E39\",\n            \"trendLineColor\": \"#1976D2\",\n            \"fontColor\": \"#787B86\",\n            \"underLineColor\": \"rgba(55, 166, 239, 0.15)\",\n            \"isTransparent\": false,\n            \"autosize\": false,\n            \"container_id\": containerId\n          }, widgetProps), widgetPropsAny));\n        }\n      };\n\n      ref.current.appendChild(script);\n      refValue = ref.current;\n    }\n\n    return () => {\n      if (refValue) {\n        while (refValue.firstChild) {\n          refValue.removeChild(refValue.firstChild);\n        }\n      }\n    };\n  }, [ref, widgetProps, widgetPropsAny, containerId]);\n  return React.createElement(\"div\", {\n    id: containerId,\n    ref: ref\n  });\n};\n\nexport default SymbolOverview;","map":{"version":3,"sources":["C:/Users/Nicholas Hughes/Desktop/Website/React/apple_clone/node_modules/react-tradingview-embed/dist/components/SymbolOverview.js"],"names":["React","SymbolOverview","props","widgetProps","widgetPropsAny","containerId","container_id","ref","createRef","useEffect","refValue","current","script","document","createElement","src","async","onload","TradingView","MediumWidget","Object","assign","appendChild","firstChild","removeChild","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCF,KAAxC;AACA,MAAIG,WAAW,GAAG,kCAAlB;;AACA,MAAIF,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACG,YAA1E,EAAwF;AACpFD,IAAAA,WAAW,GAAGF,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACG,YAApF;AACH;;AACD,QAAMC,GAAG,GAAGP,KAAK,CAACQ,SAAN,EAAZ;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB,QAAIC,QAAJ;;AACA,QAAIH,GAAG,CAACI,OAAR,EAAiB;AACb,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACG,GAAP,GAAa,kCAAb;AACAH,MAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;;AACAJ,MAAAA,MAAM,CAACK,MAAP,GAAgB,MAAM;AAClB,YAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACpC,cAAIA,WAAW,CAACC,YAAhB,CAA6BC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc;AAAE,uBAAW,CAC9D,CACI,OADJ,EAEI,MAFJ,CAD8D,EAK9D,CACI,QADJ,EAEI,OAFJ,CAL8D,EAS9D,CACI,WADJ,EAEI,MAFJ,CAT8D,CAAb;AAalD,yBAAa,KAbqC;AAa9B,qBAAS,MAbqB;AAab,sBAAU,GAbG;AAaE,sBAAU,IAbZ;AAakB,0BAAc,MAbhC;AAawC,6BAAiB,SAbzD;AAaoE,8BAAkB,SAbtF;AAaiG,yBAAa,SAb9G;AAayH,8BAAkB,0BAb3I;AAauK,6BAAiB,KAbxL;AAa+L,wBAAY,KAb3M;AAakN,4BAAgBhB;AAblO,WAAd,EAa+PF,WAb/P,CAAd,EAa2RC,cAb3R,CAA7B;AAcH;AACJ,OAjBD;;AAkBAG,MAAAA,GAAG,CAACI,OAAJ,CAAYW,WAAZ,CAAwBV,MAAxB;AACAF,MAAAA,QAAQ,GAAGH,GAAG,CAACI,OAAf;AACH;;AACD,WAAO,MAAM;AACT,UAAID,QAAJ,EAAc;AACV,eAAOA,QAAQ,CAACa,UAAhB,EAA4B;AACxBb,UAAAA,QAAQ,CAACc,WAAT,CAAqBd,QAAQ,CAACa,UAA9B;AACH;AACJ;AACJ,KAND;AAOH,GAlCD,EAkCG,CAAChB,GAAD,EAAMJ,WAAN,EAAmBC,cAAnB,EAAmCC,WAAnC,CAlCH;AAmCA,SAAOL,KAAK,CAACc,aAAN,CAAoB,KAApB,EAA2B;AAAEW,IAAAA,EAAE,EAAEpB,WAAN;AAAmBE,IAAAA,GAAG,EAAEA;AAAxB,GAA3B,CAAP;AACH,CA3CD;;AA4CA,eAAeN,cAAf","sourcesContent":["import React from \"react\";\r\nconst SymbolOverview = (props) => {\r\n    const { widgetProps, widgetPropsAny } = props;\r\n    let containerId = \"symbol-overview-widget-container\";\r\n    if (widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id) {\r\n        containerId = widgetProps === null || widgetProps === void 0 ? void 0 : widgetProps.container_id;\r\n    }\r\n    const ref = React.createRef();\r\n    React.useEffect(() => {\r\n        let refValue;\r\n        if (ref.current) {\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://s3.tradingview.com/tv.js\";\r\n            script.async = true;\r\n            script.onload = () => {\r\n                if (typeof TradingView !== \"undefined\") {\r\n                    new TradingView.MediumWidget(Object.assign(Object.assign({ \"symbols\": [\r\n                            [\r\n                                \"Apple\",\r\n                                \"AAPL\"\r\n                            ],\r\n                            [\r\n                                \"Google\",\r\n                                \"GOOGL\"\r\n                            ],\r\n                            [\r\n                                \"Microsoft\",\r\n                                \"MSFT\"\r\n                            ]\r\n                        ], \"chartOnly\": false, \"width\": \"100%\", \"height\": 400, \"locale\": \"en\", \"colorTheme\": \"dark\", \"gridLineColor\": \"#2A2E39\", \"trendLineColor\": \"#1976D2\", \"fontColor\": \"#787B86\", \"underLineColor\": \"rgba(55, 166, 239, 0.15)\", \"isTransparent\": false, \"autosize\": false, \"container_id\": containerId }, widgetProps), widgetPropsAny));\r\n                }\r\n            };\r\n            ref.current.appendChild(script);\r\n            refValue = ref.current;\r\n        }\r\n        return () => {\r\n            if (refValue) {\r\n                while (refValue.firstChild) {\r\n                    refValue.removeChild(refValue.firstChild);\r\n                }\r\n            }\r\n        };\r\n    }, [ref, widgetProps, widgetPropsAny, containerId]);\r\n    return React.createElement(\"div\", { id: containerId, ref: ref });\r\n};\r\nexport default SymbolOverview;\r\n"]},"metadata":{},"sourceType":"module"}