{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicholas Hughes\\\\Desktop\\\\Website\\\\Apple_Clone\\\\apple_clone\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\";\n\nfunction App() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const todoNameRef = useRef(); //Called Once reloaded. GET\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos);\n  }, []); //Called onces todos are changed. SAVE\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function toggleTodo(id) {\n    const newTodos = [...todos];\n    const todo = newTodos.find(todo => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(newTodos);\n  }\n\n  function handleAddTodo(e) {\n    const name = todoNameRef.current.value;\n    if (name === \"\") return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: Date(),\n        name: name,\n        complete: false\n      }];\n    });\n    todoNameRef.current.value = null;\n  }\n\n  function handleClearTodo() {\n    const newTodos = todos.fi;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      toggleTodo: toggleTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: todoNameRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \" Add Todo \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearTodo,\n      children: \" Clear Todo \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [todos.filter(todo => !todo.complete).length, \" left to do\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"qH2GEr92xkIFQxR2Djx4V7Ti/yU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Nicholas Hughes/Desktop/Website/Apple_Clone/apple_clone/src/App.js"],"names":["React","useState","useRef","useEffect","TodoList","LOCAL_STORAGE_KEY","App","todos","setTodos","todoNameRef","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","toggleTodo","id","newTodos","todo","find","complete","handleAddTodo","e","name","current","value","prevTodos","Date","handleClearTodo","fi","filter","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,iBAAiB,GAAG,eAA1B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMQ,WAAW,GAAGP,MAAM,EAA1B,CAFa,CAIb;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMO,WAAW,GAAIC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBT,iBAArB,CAAX,CAArB;AACA,QAAIK,WAAJ,EAAiBF,QAAQ,CAACE,WAAD,CAAR;AAClB,GAHQ,EAGN,EAHM,CAAT,CALa,CAUb;;AACAP,EAAAA,SAAS,CAAC,MAAI;AACVU,IAAAA,YAAY,CAACE,OAAb,CAAqBV,iBAArB,EAAwCM,IAAI,CAACK,SAAL,CAAeT,KAAf,CAAxC;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,WAASU,UAAT,CAAoBC,EAApB,EAAuB;AACrB,UAAMC,QAAQ,GAAG,CAAC,GAAGZ,KAAJ,CAAjB;AACA,UAAMa,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYA,EAAlC,CAAb;AACAE,IAAAA,IAAI,CAACE,QAAL,GAAgB,CAACF,IAAI,CAACE,QAAtB;AACAd,IAAAA,QAAQ,CAACW,QAAD,CAAR;AACD;;AAED,WAASI,aAAT,CAAwBC,CAAxB,EAA2B;AACvB,UAAMC,IAAI,GAAGhB,WAAW,CAACiB,OAAZ,CAAoBC,KAAjC;AACA,QAAIF,IAAI,KAAK,EAAb,EAAiB;AAEjBjB,IAAAA,QAAQ,CAAEoB,SAAS,IAAI;AACrB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACV,QAAAA,EAAE,EAAEW,IAAI,EAAT;AAAaJ,QAAAA,IAAI,EAAEA,IAAnB;AAAyBH,QAAAA,QAAQ,EAAE;AAAnC,OAAf,CAAP;AACD,KAFO,CAAR;AAIAb,IAAAA,WAAW,CAACiB,OAAZ,CAAoBC,KAApB,GAA4B,IAA5B;AACH;;AAED,WAASG,eAAT,GAA4B;AAC1B,UAAMX,QAAQ,GAAGZ,KAAK,CAACwB,EAAvB;AACD;;AAED,sBACE;AAAA,4BACA,QAAE,QAAF;AAAW,MAAA,KAAK,EAAIxB,KAApB;AAA2B,MAAA,UAAU,EAAIU;AAAzC;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAO,MAAA,GAAG,EAAIR,WAAd;AAA2B,MAAA,IAAI,EAAG;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAQ,MAAA,OAAO,EAAIc,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA;AAAS,MAAA,OAAO,EAAIO,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA,eAKA;AAAA,iBAAMvB,KAAK,CAACyB,MAAN,CAAaZ,IAAI,IAAI,CAACA,IAAI,CAACE,QAA3B,EAAqCW,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YALA;AAAA,kBADF;AASD;;GA9CQ3B,G;;KAAAA,G;AAgDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport TodoList from \"./TodoList\"\n\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\"\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const todoNameRef = useRef()\n\n  //Called Once reloaded. GET\n  useEffect(()=>{\n    const storedTodos =  JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storedTodos) setTodos(storedTodos)\n  }, [])\n\n  //Called onces todos are changed. SAVE\n  useEffect(()=>{\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function toggleTodo(id){\n    const newTodos = [...todos]\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function handleAddTodo (e) {\n      const name = todoNameRef.current.value\n      if (name === \"\") return\n\n      setTodos( prevTodos => {\n        return [...prevTodos, {id: Date(), name: name, complete: false}]\n      })\n\n      todoNameRef.current.value = null\n  }\n\n  function handleClearTodo () {\n    const newTodos = todos.fi\n  }\n\n  return (\n    <>\n    < TodoList todos = {todos} toggleTodo = {toggleTodo} />\n    <input ref = {todoNameRef} type = \"text\" />\n    <button onClick = {handleAddTodo}> Add Todo </button>\n    <button  onClick = {handleClearTodo}> Clear Todo </button>\n    <div>{todos.filter(todo => !todo.complete).length} left to do</div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}